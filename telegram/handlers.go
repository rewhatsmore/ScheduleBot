package telegram

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	db "schedule.sqlc.dev/app/db/sqlc"
)

const commandStart = "start"
const commandMenu = "menu" /////////////////////////////////////
const commandName = "n"
const commandTrain = "t"
const makeApp = "ma"
const cancelApp = "ca"
const backMenu = "bc"
const listTrainings = "lt"
const myTrainings = "mt"
const trainUserslList = "tu"
const adminMenu = "am"
const cancelTraining = "ct"
const adminListTr = "al"
const cancelCheck = "ch"
const adminDaT = "ad"

func handleCommand(message *tgbotapi.Message, bot *tgbotapi.BotAPI, queries *db.Queries) error {
	switch message.Command() {
	case commandStart:
		return handleStart(message, bot)
	case commandName:
		return handleName(message, bot, queries)
	case commandMenu:
		text, keyboard := listFunctions(queries, message.From.ID)
		return sendMsg(bot, message, text, keyboard)
	case commandTrain:
		return handleNewTraining(message, queries, bot)
	default:
		return handleUncnowCommand(message, bot)
	}
}

func handleNewTraining(message *tgbotapi.Message, queries *db.Queries, bot *tgbotapi.BotAPI) error {
	inputData := strings.Split(strings.TrimPrefix(message.Text, "/t "), ",")
	place := inputData[1]
	dateAndTime, err := time.Parse("02.01.2006 15:04", inputData[0])
	if err != nil {
		text := "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –æ–±—Ä–∞–∑–µ—Ü: /t 02.01.2006 15:04"
		keyboard := tgbotapi.InlineKeyboardMarkup{}
		row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", adminMenu)}
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
		return sendMsg(bot, message, text, keyboard)
	}

	arg := db.CreateTrainingParams{
		Place:       place,
		DateAndTime: dateAndTime,
	}
	_, err = queries.CreateTraining(context.Background(), arg)
	if err != nil {
		return err
	}
	text := "–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", adminMenu)}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	return sendMsg(bot, message, text, keyboard)

}

func handleCallback(callBack *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, queries *db.Queries) error {
	switch callBack.Data[:2] {
	case makeApp:
		return handleTrainingAppointment(callBack, bot, queries)
	case cancelApp:
		return handleDeleteAppointment(callBack, bot, queries)
	case listTrainings:
		text, keyboard, err := listTrainingsForUser(queries, callBack.From.ID)
		if err != nil {
			return err
		}
		return updateMsg(bot, callBack.Message, text, keyboard)
	case backMenu:
		text, keyboard := listFunctions(queries, callBack.From.ID)
		return updateMsg(bot, callBack.Message, text, keyboard)
	case myTrainings:
		text, keyboard, err := listMyTrainings(queries, callBack.From.ID)
		if err != nil {
			return err
		}
		return updateMsg(bot, callBack.Message, text, keyboard)
	case trainUserslList:
		text, keyboard, err := listTrainingUsers(queries, callBack.From.ID)
		if err != nil {
			return err
		}
		return updateMsg(bot, callBack.Message, text, keyboard)
	case adminMenu:
		text, keyboard := listAdminFunctions()
		return updateMsg(bot, callBack.Message, text, keyboard)
	case adminListTr:
		text, keyboard, err := adminListTrainings(queries)
		if err != nil {
			return err
		}
		return updateMsg(bot, callBack.Message, text, keyboard)
	case cancelCheck:
		text, keyboard := adminCancelCheck(callBack)
		return updateMsg(bot, callBack.Message, text, keyboard)
	case cancelTraining:
		return adminCancelTraining(bot, queries, callBack)
	case adminDaT:
		text, keyboard := adminDateAntTimeRequest()
		return updateMsg(bot, callBack.Message, text, keyboard)
	default:
		return nil
	}
}

func handleTrainingAppointment(callBack *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, queries *db.Queries) error {
	trainingId, err := strconv.Atoi(callBack.Data[2:])
	if err != nil {
		return err
	}

	arg := db.CreateAppointmentParams{
		TrainingID: int64(trainingId),
		UserID:     callBack.From.ID,
	}
	_, err = queries.CreateAppointment(context.Background(), arg)
	if err != nil {
		return err
	}

	text, keyboard, err := listTrainingsForUser(queries, callBack.From.ID)
	if err != nil {
		return err
	}
	return updateMsg(bot, callBack.Message, text, keyboard)
}

func handleDeleteAppointment(callBack *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, queries *db.Queries) error {
	appointmentId, err := strconv.Atoi(callBack.Data[2:])
	if err != nil {
		return err
	}

	err = queries.DeleteAppointment(context.Background(), int64(appointmentId))
	if err != nil {
		return err
	}

	text, keyboard, err := listTrainingsForUser(queries, callBack.From.ID)
	if err != nil {
		return err
	}
	return updateMsg(bot, callBack.Message, text, keyboard)
}

func handleStart(message *tgbotapi.Message, bot *tgbotapi.BotAPI) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: \n /n –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
	_, err := bot.Send(msg)
	return err
}

func handleName(message *tgbotapi.Message, bot *tgbotapi.BotAPI, queries *db.Queries) error {
	fullName := strings.TrimPrefix(message.Text, "/n")
	arg := db.CreateUserParams{
		UserID:   message.From.ID,
		FullName: fullName,
	}
	_, err := queries.CreateUser(context.Background(), arg) // –∫–æ–Ω—Ç–µ–∫—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è/////////////////////////////////
	if err != nil {
		return err //–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É/////////////////////////////
	} /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	msg := tgbotapi.NewMessage(message.From.ID, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
	_, err = bot.Send(msg)
	if err != nil {
		return err //–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É/////////////////////////////
	}
	text, keyboard := listFunctions(queries, message.From.ID)
	err = sendMsg(bot, message, text, keyboard)
	return err
}

func listFunctions(queries *db.Queries, userID int64) (string, tgbotapi.InlineKeyboardMarkup) {

	msgText := "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"

	btnText := map[string]string{
		listTrainings:   "–ó–∞–ø–∏—Å—å/–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏",
		myTrainings:     "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
		trainUserslList: "–ö—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω?",
	}

	keyboard := tgbotapi.InlineKeyboardMarkup{}
	for data, text := range btnText {
		var row []tgbotapi.InlineKeyboardButton
		btn := tgbotapi.NewInlineKeyboardButtonData(text, data)
		row = append(row, btn)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}
	user, err := queries.GetUser(context.Background(), userID)
	if err != nil {
		log.Println(err)
	}
	if user.IsAdmin {
		newRow := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é –ê–¥–º–∏–Ω–∞", adminMenu),
		}
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, newRow)
	}
	return msgText, keyboard
}

func listAdminFunctions() (string, tgbotapi.InlineKeyboardMarkup) {

	msgText := "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"

	btnText := map[string]string{
		adminListTr: "–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
		adminDaT:    "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
		backMenu:    "‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
	}

	keyboard := tgbotapi.InlineKeyboardMarkup{}
	for data, text := range btnText {
		var row []tgbotapi.InlineKeyboardButton
		btn := tgbotapi.NewInlineKeyboardButtonData(text, data)
		row = append(row, btn)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}

	return msgText, keyboard
}

func listMyTrainings(queries *db.Queries, userID int64) (string, tgbotapi.InlineKeyboardMarkup, error) {
	text := "–¢–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "bc")}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

	userTrainings, err := queries.ListUserTrainings(context.Background(), userID)
	if err != nil {
		return text, keyboard, err //–≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫???/////////////
	}

	for _, userTraining := range userTrainings {
		training := db.Training{
			TrainingID:  userTraining.TrainingID,
			Place:       userTraining.Place,
			DateAndTime: userTraining.DateAndTime,
		}
		text += "üèÖ" + createTextOfTraining(training) + "\n"
	}

	return text, keyboard, nil
}

//// —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–º–µ–Ω—ã
func listTrainingsForUser(queries *db.Queries, userID int64) (string, tgbotapi.InlineKeyboardMarkup, error) {
	text := "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é. –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
	keyboard := tgbotapi.InlineKeyboardMarkup{}

	trainingsForSend, err := queries.ListTrainingsForSend(context.Background(), userID)
	if err != nil {
		return text, keyboard, err
	}

	for _, trainingForSend := range trainingsForSend {
		training := db.Training{
			TrainingID:  trainingForSend.TrainingID,
			Place:       trainingForSend.Place,
			DateAndTime: trainingForSend.DateAndTime,
		}
		var row []tgbotapi.InlineKeyboardButton
		text := createTextOfTraining(training)
		data := makeApp + strconv.Itoa(int(trainingForSend.TrainingID))
		if trainingForSend.AppointmentID != 0 {
			text = "‚úÖ " + text
			data = cancelApp + fmt.Sprintf("%d", training.TrainingID)
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(text, data)
		row = append(row, btn)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "bc")}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

	return text, keyboard, nil
}

func listTrainingUsers(queries *db.Queries, userID int64) (string, tgbotapi.InlineKeyboardMarkup, error) {
	var text string
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "bc")}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

	trainings, err := queries.ListTrainings(context.Background())
	if err != nil {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ", keyboard, err
	}
	for _, training := range trainings {
		text += "üèÖ " + createTextOfTraining(training) + "\n"
		users, err := queries.ListTrainingUsers(context.Background(), training.TrainingID)
		if err != nil {
			log.Panicln(err)
		}
		for i, user := range users {
			text += fmt.Sprintf("%d. %s\n", i+1, user.FullName)
		}
		text += "\n"
	}
	return text, keyboard, nil
}

func adminListTrainings(queries *db.Queries) (string, tgbotapi.InlineKeyboardMarkup, error) {
	text := "–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
	keyboard := tgbotapi.InlineKeyboardMarkup{}

	trainings, err := queries.ListTrainings(context.Background())
	if err != nil {
		return text, keyboard, err
	}

	for _, training := range trainings {

		var row []tgbotapi.InlineKeyboardButton
		text := createTextOfTraining(training)
		data := cancelCheck + training.DateAndTime.Format("/02.01 –≤ 15:04/") + fmt.Sprintf("%d", training.TrainingID)

		btn := tgbotapi.NewInlineKeyboardButtonData(text, data)
		row = append(row, btn)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", adminMenu)}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

	return text, keyboard, nil
}

func adminCancelCheck(callBack *tgbotapi.CallbackQuery) (string, tgbotapi.InlineKeyboardMarkup) {
	callBackData := strings.Split(callBack.Data, "/")
	text := fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É %s ?", callBackData[1])
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	row := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–î–∞", cancelTraining+callBackData[2]),
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", adminMenu),
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	return text, keyboard
}

func adminCancelTraining(bot *tgbotapi.BotAPI, queries *db.Queries, callBack *tgbotapi.CallbackQuery) error {
	trainingId, err := strconv.Atoi(callBack.Data[2:])
	if err != nil {
		return err
	}

	err = queries.DeleteTraining(context.Background(), int64(trainingId))
	if err != nil {
		return err
	}

	text, keyboard, err := adminListTrainings(queries)
	if err != nil {
		return err
	}
	return updateMsg(bot, callBack.Message, text, keyboard)
}

// func ()  {

// }

func adminDateAntTimeRequest() (string, tgbotapi.InlineKeyboardMarkup) {
	text := "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏  —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n/t 02.01.2006 15:04, –∑–∞–ª Ninja Way"
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", adminMenu)}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	return text, keyboard
}

func sendMsg(bot *tgbotapi.BotAPI, message *tgbotapi.Message, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	_, err := bot.Send(msg)
	return err
}

func updateMsg(bot *tgbotapi.BotAPI, message *tgbotapi.Message, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(message.Chat.ID, message.MessageID, text, keyboard)
	_, err := bot.Send(editMsg)
	return err
}

func handleUncnowCommand(message *tgbotapi.Message, bot *tgbotapi.BotAPI) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
	_, err := bot.Send(msg)
	return err
}

// —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
func createTextOfTraining(training db.Training) string {
	engTime := training.DateAndTime.Format("Mon 02.01 –≤ 15:04")
	time := translateWeekDay(engTime)
	place := training.Place
	return fmt.Sprintf("%s, %s", time, place)
}

func translateWeekDay(s string) string {
	dict := map[string]string{"Mon": "–ø–Ω", "Tue": "–≤—Ç", "Wed": "—Å—Ä", "Thu": "—á—Ç", "Fri": "–ø—Ç", "Sat": "—Å–±", "Sun": "–≤—Å"}
	old := s[:3]
	new := dict[old]
	return strings.Replace(s, old, new, 1)
}

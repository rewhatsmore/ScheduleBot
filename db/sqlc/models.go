// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type GroupTypeEnum string

const (
	GroupTypeEnumAdult GroupTypeEnum = "adult"
	GroupTypeEnumChild GroupTypeEnum = "child"
)

func (e *GroupTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroupTypeEnum(s)
	case string:
		*e = GroupTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GroupTypeEnum: %T", src)
	}
	return nil
}

type NullGroupTypeEnum struct {
	GroupTypeEnum GroupTypeEnum `json:"group_type_enum"`
	Valid         bool          `json:"valid"` // Valid is true if GroupTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroupTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GroupTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroupTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroupTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GroupTypeEnum), nil
}

type Appointment struct {
	AppointmentID         int64     `json:"appointment_id"`
	TrainingID            int64     `json:"training_id"`
	UserID                int64     `json:"user_id"`
	AdditionalChildNumber int64     `json:"additional_child_number"`
	CreatedAt             time.Time `json:"created_at"`
}

type Training struct {
	TrainingID   int64         `json:"training_id"`
	Place        string        `json:"place"`
	Type         string        `json:"type"`
	DateAndTime  time.Time     `json:"date_and_time"`
	Price        int64         `json:"price"`
	Trainer      string        `json:"trainer"`
	GroupType    GroupTypeEnum `json:"group_type"`
	ColumnNumber int64         `json:"column_number"`
}

type User struct {
	// chat_id from telegram
	UserID    int64     `json:"user_id"`
	FullName  string    `json:"full_name"`
	IsAdmin   bool      `json:"is_admin"`
	CreatedAt time.Time `json:"created_at"`
	RowNumber int64     `json:"row_number"`
}

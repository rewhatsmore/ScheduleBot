// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
user_id, full_name
) VALUES (
$1, $2
)
RETURNING user_id, full_name, is_admin, created_at
`

type CreateUserParams struct {
	UserID   int64  `json:"user_id"`
	FullName string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.FullName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, full_name, is_admin, created_at fROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET full_name = $2
WHERE user_id = $1
RETURNING user_id, full_name, is_admin, created_at
`

type UpdateUserParams struct {
	UserID   int64  `json:"user_id"`
	FullName string `json:"full_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.UserID, arg.FullName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}
